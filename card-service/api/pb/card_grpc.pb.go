// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: card.proto

package card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error)
	GetCardByID(ctx context.Context, in *GetCardByIDRequest, opts ...grpc.CallOption) (*GetCardByIDResponse, error)
	GetCardsByList(ctx context.Context, in *GetCardsByListRequest, opts ...grpc.CallOption) (*GetCardsByListResponse, error)
	GetCardsByBoard(ctx context.Context, in *GetCardsByBoardRequest, opts ...grpc.CallOption) (*GetCardsByBoardResponse, error)
	// TODO : Add GetArchivedCardsByBoard
	MoveCardPosition(ctx context.Context, in *MoveCardPositionRequest, opts ...grpc.CallOption) (*MoveCardPositionResponse, error)
	UpdateCardName(ctx context.Context, in *UpdateCardNameRequest, opts ...grpc.CallOption) (*UpdateCardNameResponse, error)
	UpdateCardDescription(ctx context.Context, in *UpdateCardDescriptionRequest, opts ...grpc.CallOption) (*UpdateCardDescriptionResponse, error)
	AddCardLabel(ctx context.Context, in *AddCardLabelRequest, opts ...grpc.CallOption) (*AddCardLabelResponse, error)
	RemoveCardLabel(ctx context.Context, in *RemoveCardLabelRequest, opts ...grpc.CallOption) (*RemoveCardLabelResponse, error)
	SetCardDates(ctx context.Context, in *SetCardDatesRequest, opts ...grpc.CallOption) (*SetCardDatesResponse, error)
	ToggleCardCompleted(ctx context.Context, in *ToggleCardCompletedRequest, opts ...grpc.CallOption) (*ToggleCardCompletedResponse, error)
	AddCardAttachment(ctx context.Context, in *AddCardAttachmentRequest, opts ...grpc.CallOption) (*AddCardAttachmentResponse, error)
	RemoveCardAttachment(ctx context.Context, in *RemoveCardAttachmentRequest, opts ...grpc.CallOption) (*RemoveCardAttachmentResponse, error)
	AddCardComment(ctx context.Context, in *AddCardCommentRequest, opts ...grpc.CallOption) (*AddCardCommentResponse, error)
	RemoveCardComment(ctx context.Context, in *RemoveCardCommentRequest, opts ...grpc.CallOption) (*RemoveCardCommentResponse, error)
	AddCardMembers(ctx context.Context, in *AddCardMembersRequest, opts ...grpc.CallOption) (*AddCardMembersResponse, error)
	RemoveCardMembers(ctx context.Context, in *RemoveCardMembersRequest, opts ...grpc.CallOption) (*RemoveCardMembersResponse, error)
	ArchiveCard(ctx context.Context, in *ArchiveCardRequest, opts ...grpc.CallOption) (*ArchiveCardResponse, error)
	RestoreCard(ctx context.Context, in *RestoreCardRequest, opts ...grpc.CallOption) (*RestoreCardResponse, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResponse, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error) {
	out := new(CreateCardResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardByID(ctx context.Context, in *GetCardByIDRequest, opts ...grpc.CallOption) (*GetCardByIDResponse, error) {
	out := new(GetCardByIDResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/GetCardByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsByList(ctx context.Context, in *GetCardsByListRequest, opts ...grpc.CallOption) (*GetCardsByListResponse, error) {
	out := new(GetCardsByListResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/GetCardsByList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardsByBoard(ctx context.Context, in *GetCardsByBoardRequest, opts ...grpc.CallOption) (*GetCardsByBoardResponse, error) {
	out := new(GetCardsByBoardResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/GetCardsByBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) MoveCardPosition(ctx context.Context, in *MoveCardPositionRequest, opts ...grpc.CallOption) (*MoveCardPositionResponse, error) {
	out := new(MoveCardPositionResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/MoveCardPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) UpdateCardName(ctx context.Context, in *UpdateCardNameRequest, opts ...grpc.CallOption) (*UpdateCardNameResponse, error) {
	out := new(UpdateCardNameResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/UpdateCardName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) UpdateCardDescription(ctx context.Context, in *UpdateCardDescriptionRequest, opts ...grpc.CallOption) (*UpdateCardDescriptionResponse, error) {
	out := new(UpdateCardDescriptionResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/UpdateCardDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCardLabel(ctx context.Context, in *AddCardLabelRequest, opts ...grpc.CallOption) (*AddCardLabelResponse, error) {
	out := new(AddCardLabelResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/AddCardLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) RemoveCardLabel(ctx context.Context, in *RemoveCardLabelRequest, opts ...grpc.CallOption) (*RemoveCardLabelResponse, error) {
	out := new(RemoveCardLabelResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/RemoveCardLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) SetCardDates(ctx context.Context, in *SetCardDatesRequest, opts ...grpc.CallOption) (*SetCardDatesResponse, error) {
	out := new(SetCardDatesResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/SetCardDates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ToggleCardCompleted(ctx context.Context, in *ToggleCardCompletedRequest, opts ...grpc.CallOption) (*ToggleCardCompletedResponse, error) {
	out := new(ToggleCardCompletedResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/ToggleCardCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCardAttachment(ctx context.Context, in *AddCardAttachmentRequest, opts ...grpc.CallOption) (*AddCardAttachmentResponse, error) {
	out := new(AddCardAttachmentResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/AddCardAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) RemoveCardAttachment(ctx context.Context, in *RemoveCardAttachmentRequest, opts ...grpc.CallOption) (*RemoveCardAttachmentResponse, error) {
	out := new(RemoveCardAttachmentResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/RemoveCardAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCardComment(ctx context.Context, in *AddCardCommentRequest, opts ...grpc.CallOption) (*AddCardCommentResponse, error) {
	out := new(AddCardCommentResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/AddCardComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) RemoveCardComment(ctx context.Context, in *RemoveCardCommentRequest, opts ...grpc.CallOption) (*RemoveCardCommentResponse, error) {
	out := new(RemoveCardCommentResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/RemoveCardComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCardMembers(ctx context.Context, in *AddCardMembersRequest, opts ...grpc.CallOption) (*AddCardMembersResponse, error) {
	out := new(AddCardMembersResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/AddCardMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) RemoveCardMembers(ctx context.Context, in *RemoveCardMembersRequest, opts ...grpc.CallOption) (*RemoveCardMembersResponse, error) {
	out := new(RemoveCardMembersResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/RemoveCardMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ArchiveCard(ctx context.Context, in *ArchiveCardRequest, opts ...grpc.CallOption) (*ArchiveCardResponse, error) {
	out := new(ArchiveCardResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/ArchiveCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) RestoreCard(ctx context.Context, in *RestoreCardRequest, opts ...grpc.CallOption) (*RestoreCardResponse, error) {
	out := new(RestoreCardResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/RestoreCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResponse, error) {
	out := new(DeleteCardResponse)
	err := c.cc.Invoke(ctx, "/cardpb.CardService/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility
type CardServiceServer interface {
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error)
	GetCardByID(context.Context, *GetCardByIDRequest) (*GetCardByIDResponse, error)
	GetCardsByList(context.Context, *GetCardsByListRequest) (*GetCardsByListResponse, error)
	GetCardsByBoard(context.Context, *GetCardsByBoardRequest) (*GetCardsByBoardResponse, error)
	// TODO : Add GetArchivedCardsByBoard
	MoveCardPosition(context.Context, *MoveCardPositionRequest) (*MoveCardPositionResponse, error)
	UpdateCardName(context.Context, *UpdateCardNameRequest) (*UpdateCardNameResponse, error)
	UpdateCardDescription(context.Context, *UpdateCardDescriptionRequest) (*UpdateCardDescriptionResponse, error)
	AddCardLabel(context.Context, *AddCardLabelRequest) (*AddCardLabelResponse, error)
	RemoveCardLabel(context.Context, *RemoveCardLabelRequest) (*RemoveCardLabelResponse, error)
	SetCardDates(context.Context, *SetCardDatesRequest) (*SetCardDatesResponse, error)
	ToggleCardCompleted(context.Context, *ToggleCardCompletedRequest) (*ToggleCardCompletedResponse, error)
	AddCardAttachment(context.Context, *AddCardAttachmentRequest) (*AddCardAttachmentResponse, error)
	RemoveCardAttachment(context.Context, *RemoveCardAttachmentRequest) (*RemoveCardAttachmentResponse, error)
	AddCardComment(context.Context, *AddCardCommentRequest) (*AddCardCommentResponse, error)
	RemoveCardComment(context.Context, *RemoveCardCommentRequest) (*RemoveCardCommentResponse, error)
	AddCardMembers(context.Context, *AddCardMembersRequest) (*AddCardMembersResponse, error)
	RemoveCardMembers(context.Context, *RemoveCardMembersRequest) (*RemoveCardMembersResponse, error)
	ArchiveCard(context.Context, *ArchiveCardRequest) (*ArchiveCardResponse, error)
	RestoreCard(context.Context, *RestoreCardRequest) (*RestoreCardResponse, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCardServiceServer struct {
}

func (UnimplementedCardServiceServer) CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardServiceServer) GetCardByID(context.Context, *GetCardByIDRequest) (*GetCardByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardByID not implemented")
}
func (UnimplementedCardServiceServer) GetCardsByList(context.Context, *GetCardsByListRequest) (*GetCardsByListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByList not implemented")
}
func (UnimplementedCardServiceServer) GetCardsByBoard(context.Context, *GetCardsByBoardRequest) (*GetCardsByBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsByBoard not implemented")
}
func (UnimplementedCardServiceServer) MoveCardPosition(context.Context, *MoveCardPositionRequest) (*MoveCardPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveCardPosition not implemented")
}
func (UnimplementedCardServiceServer) UpdateCardName(context.Context, *UpdateCardNameRequest) (*UpdateCardNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardName not implemented")
}
func (UnimplementedCardServiceServer) UpdateCardDescription(context.Context, *UpdateCardDescriptionRequest) (*UpdateCardDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardDescription not implemented")
}
func (UnimplementedCardServiceServer) AddCardLabel(context.Context, *AddCardLabelRequest) (*AddCardLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardLabel not implemented")
}
func (UnimplementedCardServiceServer) RemoveCardLabel(context.Context, *RemoveCardLabelRequest) (*RemoveCardLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCardLabel not implemented")
}
func (UnimplementedCardServiceServer) SetCardDates(context.Context, *SetCardDatesRequest) (*SetCardDatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCardDates not implemented")
}
func (UnimplementedCardServiceServer) ToggleCardCompleted(context.Context, *ToggleCardCompletedRequest) (*ToggleCardCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleCardCompleted not implemented")
}
func (UnimplementedCardServiceServer) AddCardAttachment(context.Context, *AddCardAttachmentRequest) (*AddCardAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardAttachment not implemented")
}
func (UnimplementedCardServiceServer) RemoveCardAttachment(context.Context, *RemoveCardAttachmentRequest) (*RemoveCardAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCardAttachment not implemented")
}
func (UnimplementedCardServiceServer) AddCardComment(context.Context, *AddCardCommentRequest) (*AddCardCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardComment not implemented")
}
func (UnimplementedCardServiceServer) RemoveCardComment(context.Context, *RemoveCardCommentRequest) (*RemoveCardCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCardComment not implemented")
}
func (UnimplementedCardServiceServer) AddCardMembers(context.Context, *AddCardMembersRequest) (*AddCardMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardMembers not implemented")
}
func (UnimplementedCardServiceServer) RemoveCardMembers(context.Context, *RemoveCardMembersRequest) (*RemoveCardMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCardMembers not implemented")
}
func (UnimplementedCardServiceServer) ArchiveCard(context.Context, *ArchiveCardRequest) (*ArchiveCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveCard not implemented")
}
func (UnimplementedCardServiceServer) RestoreCard(context.Context, *RestoreCardRequest) (*RestoreCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCard not implemented")
}
func (UnimplementedCardServiceServer) DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/GetCardByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardByID(ctx, req.(*GetCardByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsByList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsByListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsByList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/GetCardsByList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsByList(ctx, req.(*GetCardsByListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardsByBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsByBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardsByBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/GetCardsByBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardsByBoard(ctx, req.(*GetCardsByBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_MoveCardPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveCardPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).MoveCardPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/MoveCardPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).MoveCardPosition(ctx, req.(*MoveCardPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_UpdateCardName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).UpdateCardName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/UpdateCardName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).UpdateCardName(ctx, req.(*UpdateCardNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_UpdateCardDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).UpdateCardDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/UpdateCardDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).UpdateCardDescription(ctx, req.(*UpdateCardDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCardLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCardLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/AddCardLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCardLabel(ctx, req.(*AddCardLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_RemoveCardLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCardLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).RemoveCardLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/RemoveCardLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).RemoveCardLabel(ctx, req.(*RemoveCardLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_SetCardDates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCardDatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).SetCardDates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/SetCardDates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).SetCardDates(ctx, req.(*SetCardDatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ToggleCardCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleCardCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ToggleCardCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/ToggleCardCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ToggleCardCompleted(ctx, req.(*ToggleCardCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCardAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCardAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/AddCardAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCardAttachment(ctx, req.(*AddCardAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_RemoveCardAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCardAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).RemoveCardAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/RemoveCardAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).RemoveCardAttachment(ctx, req.(*RemoveCardAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCardComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCardComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/AddCardComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCardComment(ctx, req.(*AddCardCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_RemoveCardComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCardCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).RemoveCardComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/RemoveCardComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).RemoveCardComment(ctx, req.(*RemoveCardCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCardMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCardMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/AddCardMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCardMembers(ctx, req.(*AddCardMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_RemoveCardMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCardMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).RemoveCardMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/RemoveCardMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).RemoveCardMembers(ctx, req.(*RemoveCardMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ArchiveCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ArchiveCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/ArchiveCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ArchiveCard(ctx, req.(*ArchiveCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_RestoreCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).RestoreCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/RestoreCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).RestoreCard(ctx, req.(*RestoreCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cardpb.CardService/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cardpb.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _CardService_CreateCard_Handler,
		},
		{
			MethodName: "GetCardByID",
			Handler:    _CardService_GetCardByID_Handler,
		},
		{
			MethodName: "GetCardsByList",
			Handler:    _CardService_GetCardsByList_Handler,
		},
		{
			MethodName: "GetCardsByBoard",
			Handler:    _CardService_GetCardsByBoard_Handler,
		},
		{
			MethodName: "MoveCardPosition",
			Handler:    _CardService_MoveCardPosition_Handler,
		},
		{
			MethodName: "UpdateCardName",
			Handler:    _CardService_UpdateCardName_Handler,
		},
		{
			MethodName: "UpdateCardDescription",
			Handler:    _CardService_UpdateCardDescription_Handler,
		},
		{
			MethodName: "AddCardLabel",
			Handler:    _CardService_AddCardLabel_Handler,
		},
		{
			MethodName: "RemoveCardLabel",
			Handler:    _CardService_RemoveCardLabel_Handler,
		},
		{
			MethodName: "SetCardDates",
			Handler:    _CardService_SetCardDates_Handler,
		},
		{
			MethodName: "ToggleCardCompleted",
			Handler:    _CardService_ToggleCardCompleted_Handler,
		},
		{
			MethodName: "AddCardAttachment",
			Handler:    _CardService_AddCardAttachment_Handler,
		},
		{
			MethodName: "RemoveCardAttachment",
			Handler:    _CardService_RemoveCardAttachment_Handler,
		},
		{
			MethodName: "AddCardComment",
			Handler:    _CardService_AddCardComment_Handler,
		},
		{
			MethodName: "RemoveCardComment",
			Handler:    _CardService_RemoveCardComment_Handler,
		},
		{
			MethodName: "AddCardMembers",
			Handler:    _CardService_AddCardMembers_Handler,
		},
		{
			MethodName: "RemoveCardMembers",
			Handler:    _CardService_RemoveCardMembers_Handler,
		},
		{
			MethodName: "ArchiveCard",
			Handler:    _CardService_ArchiveCard_Handler,
		},
		{
			MethodName: "RestoreCard",
			Handler:    _CardService_RestoreCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _CardService_DeleteCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "card.proto",
}
