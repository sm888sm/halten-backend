// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: list.proto

package list

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListServiceClient is the client API for ListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListServiceClient interface {
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error)
	GetListsByBoard(ctx context.Context, in *GetListsByBoardRequest, opts ...grpc.CallOption) (*GetListsByBoardResponse, error)
	UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*UpdateListResponse, error)
	DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*DeleteListResponse, error)
	MoveListPosition(ctx context.Context, in *MoveListPositionRequest, opts ...grpc.CallOption) (*MoveListPositionResponse, error)
	WatchListActivity(ctx context.Context, in *WatchListActivityRequest, opts ...grpc.CallOption) (ListService_WatchListActivityClient, error)
}

type listServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListServiceClient(cc grpc.ClientConnInterface) ListServiceClient {
	return &listServiceClient{cc}
}

func (c *listServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error) {
	out := new(CreateListResponse)
	err := c.cc.Invoke(ctx, "/listpb.ListService/CreateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetListsByBoard(ctx context.Context, in *GetListsByBoardRequest, opts ...grpc.CallOption) (*GetListsByBoardResponse, error) {
	out := new(GetListsByBoardResponse)
	err := c.cc.Invoke(ctx, "/listpb.ListService/GetListsByBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*UpdateListResponse, error) {
	out := new(UpdateListResponse)
	err := c.cc.Invoke(ctx, "/listpb.ListService/UpdateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*DeleteListResponse, error) {
	out := new(DeleteListResponse)
	err := c.cc.Invoke(ctx, "/listpb.ListService/DeleteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) MoveListPosition(ctx context.Context, in *MoveListPositionRequest, opts ...grpc.CallOption) (*MoveListPositionResponse, error) {
	out := new(MoveListPositionResponse)
	err := c.cc.Invoke(ctx, "/listpb.ListService/MoveListPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) WatchListActivity(ctx context.Context, in *WatchListActivityRequest, opts ...grpc.CallOption) (ListService_WatchListActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &ListService_ServiceDesc.Streams[0], "/listpb.ListService/WatchListActivity", opts...)
	if err != nil {
		return nil, err
	}
	x := &listServiceWatchListActivityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ListService_WatchListActivityClient interface {
	Recv() (*WatchListActivityResponse, error)
	grpc.ClientStream
}

type listServiceWatchListActivityClient struct {
	grpc.ClientStream
}

func (x *listServiceWatchListActivityClient) Recv() (*WatchListActivityResponse, error) {
	m := new(WatchListActivityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ListServiceServer is the server API for ListService service.
// All implementations must embed UnimplementedListServiceServer
// for forward compatibility
type ListServiceServer interface {
	CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error)
	GetListsByBoard(context.Context, *GetListsByBoardRequest) (*GetListsByBoardResponse, error)
	UpdateList(context.Context, *UpdateListRequest) (*UpdateListResponse, error)
	DeleteList(context.Context, *DeleteListRequest) (*DeleteListResponse, error)
	MoveListPosition(context.Context, *MoveListPositionRequest) (*MoveListPositionResponse, error)
	WatchListActivity(*WatchListActivityRequest, ListService_WatchListActivityServer) error
	mustEmbedUnimplementedListServiceServer()
}

// UnimplementedListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedListServiceServer struct {
}

func (UnimplementedListServiceServer) CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedListServiceServer) GetListsByBoard(context.Context, *GetListsByBoardRequest) (*GetListsByBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListsByBoard not implemented")
}
func (UnimplementedListServiceServer) UpdateList(context.Context, *UpdateListRequest) (*UpdateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (UnimplementedListServiceServer) DeleteList(context.Context, *DeleteListRequest) (*DeleteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteList not implemented")
}
func (UnimplementedListServiceServer) MoveListPosition(context.Context, *MoveListPositionRequest) (*MoveListPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveListPosition not implemented")
}
func (UnimplementedListServiceServer) WatchListActivity(*WatchListActivityRequest, ListService_WatchListActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchListActivity not implemented")
}
func (UnimplementedListServiceServer) mustEmbedUnimplementedListServiceServer() {}

// UnsafeListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListServiceServer will
// result in compilation errors.
type UnsafeListServiceServer interface {
	mustEmbedUnimplementedListServiceServer()
}

func RegisterListServiceServer(s grpc.ServiceRegistrar, srv ListServiceServer) {
	s.RegisterService(&ListService_ServiceDesc, srv)
}

func _ListService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listpb.ListService/CreateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetListsByBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListsByBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetListsByBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listpb.ListService/GetListsByBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetListsByBoard(ctx, req.(*GetListsByBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listpb.ListService/UpdateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UpdateList(ctx, req.(*UpdateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_DeleteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).DeleteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listpb.ListService/DeleteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).DeleteList(ctx, req.(*DeleteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_MoveListPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveListPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).MoveListPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listpb.ListService/MoveListPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).MoveListPosition(ctx, req.(*MoveListPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_WatchListActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchListActivityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ListServiceServer).WatchListActivity(m, &listServiceWatchListActivityServer{stream})
}

type ListService_WatchListActivityServer interface {
	Send(*WatchListActivityResponse) error
	grpc.ServerStream
}

type listServiceWatchListActivityServer struct {
	grpc.ServerStream
}

func (x *listServiceWatchListActivityServer) Send(m *WatchListActivityResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ListService_ServiceDesc is the grpc.ServiceDesc for ListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listpb.ListService",
	HandlerType: (*ListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateList",
			Handler:    _ListService_CreateList_Handler,
		},
		{
			MethodName: "GetListsByBoard",
			Handler:    _ListService_GetListsByBoard_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _ListService_UpdateList_Handler,
		},
		{
			MethodName: "DeleteList",
			Handler:    _ListService_DeleteList_Handler,
		},
		{
			MethodName: "MoveListPosition",
			Handler:    _ListService_MoveListPosition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchListActivity",
			Handler:       _ListService_WatchListActivity_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "list.proto",
}
