syntax = "proto3";
package boardpb;
option go_package = "github.com/sm888sm/halten-backend/board-service/pb/board";

import "google/protobuf/timestamp.proto";

// Data Structures (Messages)
message Pagination {
    uint64 current_page = 1;
    uint64 total_pages = 2;
    uint64 items_per_page = 3;
    uint64 total_items = 4;
    bool has_more = 5;
}

message Board {
    uint64 boardID = 1;
    uint64 userID = 2;
    string name = 3;
    string visibility = 4;
    repeated BoardMember members = 5;
    repeated List lists = 6;
    repeated CardMeta cards = 7;
    repeated Label labels = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
}

message List {
    uint64 listID = 1;
    uint64 boardID = 2;
    string name = 3;
    int64 position = 4;
}

message Card {
    uint64 cardID  = 1;
    uint64 boardID  = 2;
    uint64 listID  = 3;
    string name = 4;
    string description = 5;
    int64 position = 6;
    repeated uint64 attachments = 7;
    repeated uint64 labels = 8;
    repeated uint64 members = 9;
    bool isCompleted = 10;
    google.protobuf.Timestamp start_date = 11;
    google.protobuf.Timestamp due_date = 12;
    google.protobuf.Timestamp created_at = 13;
    google.protobuf.Timestamp updated_at = 14;
}

message CardMeta {
    uint64 cardID  = 1;
    uint64 boardID  = 2;
    uint64 listID  = 3;
    string name = 4;
    int64 position = 5;
    repeated uint64 labels = 6;
    repeated uint64 members = 7;
    uint64 totalAttachment = 8;
    uint64 totalComment = 9;
    bool isCompleted = 10;
    google.protobuf.Timestamp start_date = 11;
    google.protobuf.Timestamp due_date = 12;
    google.protobuf.Timestamp created_at = 13;
    google.protobuf.Timestamp updated_at = 14;
}

message Label {
    uint64 labelID = 1;
    string name = 2;
    string color = 3;
    uint64 boardID = 4;
}

message Attachment {
    uint64 attachmentID = 1;
    uint64 cardID = 2;
    string file_name = 3;
    string file_path = 4;
    string type = 5;
    string thumbnail = 6;
}

message BoardMeta {
    uint64 boardID = 1;
    string name = 3;
    string visibility = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
}

message BoardMember {
    uint64 boardID = 1;
    uint64 userID = 2;
    string username = 3;
    string fullname = 4;
    string role = 5;
}

// Request and Response Messages
message CreateBoardRequest {
    string name = 1;
}

message CreateBoardResponse {
    Board board = 1;
}

message GetBoardByIDRequest {
    // uint64 boardID = 1;
}

message GetBoardByIDResponse {
    Board board = 1;
}

message GetBoardListRequest {
    uint64 pageNumber = 1;
    uint64 pageSize = 2;
}

message GetBoardListResponse {
    repeated BoardMeta boards = 1;
    Pagination pagination = 2;
}

message GetBoardMembersRequest {
    // uint64 boardID = 1;
}

message GetBoardMembersResponse {
    repeated BoardMember members = 1;
}

message UpdateBoardNameRequest {
    // uint64 boardID = 1;
    string name = 1;
}

message UpdateBoardNameResponse {
    string message = 1;
}

message AddBoardUsersRequest {
    // uint64 boardID = 1;
    repeated uint64 userIDs = 1;
    string role = 2;
}

message AddBoardUsersResponse {
    string message = 1;
}

message RemoveBoardUsersRequest {
    // uint64 boardID = 1;
    repeated uint64 userIDs = 1;
}

message RemoveBoardUsersResponse {
    string message = 1;
}

message AssignBoardUsersRoleRequest {
    // uint64 boardID = 1;
    repeated uint64 userIDs = 1;
    string role = 2;
}

message AssignBoardUsersRoleResponse {
    string message = 1;
}

message ChangeBoardOwnerRequest {
    // uint64 boardID = 1;
    uint64 newOwnerID = 1;
}

message ChangeBoardOwnerResponse {
    string message = 1;
}

message ChangeBoardVisibilityRequest {
    // uint64 boardID = 1;
    string visibility = 1;
}

message ChangeBoardVisibilityResponse {
    string message = 1;
}

message GetArchivedBoardListRequest {
    uint64 pageNumber = 1;
    uint64 pageSize = 2;
    uint64 userID = 3;
}

message GetArchivedBoardListResponse {
    repeated BoardMeta boards = 1;
    Pagination pagination = 2;
}

message RestoreBoardRequest {
    // uint64 boardID = 1;
}

message RestoreBoardResponse {
    string message = 1;
}

message AddLabelRequest {
    // uint64 boardID = 1;
    string name = 1;
    string color = 2;
}

message AddLabelResponse {
    Label label = 1;
}

message RemoveLabelRequest {
    // uint64 boardID = 1;
    uint64 labelID = 1;
}

message RemoveLabelResponse {
    string message = 1;
}

message ArchiveBoardRequest {
    // uint64 boardID = 1;
}

message ArchiveBoardResponse {
    string message = 1;
}

message DeleteBoardRequest {
    // uint64 boardID = 1;
}

message DeleteBoardResponse {
    string message = 1;
}

message GetBoardIDByListRequest {
    uint64 listID = 1;
}

message GetBoardIDByListResponse {
    uint64 boardID = 1;
}

message GetBoardIDByCardRequest {
    uint64 cardID = 1;
}

message GetBoardIDByCardResponse {
    uint64 boardID = 1;
}

// Service Definition
service BoardService {
    rpc CreateBoard(CreateBoardRequest) returns (CreateBoardResponse);
    rpc GetBoardByID(GetBoardByIDRequest) returns (GetBoardByIDResponse);
    rpc GetBoardList(GetBoardListRequest) returns (GetBoardListResponse);
    rpc GetArchivedBoardList(GetArchivedBoardListRequest) returns (GetArchivedBoardListResponse);
    rpc GetBoardMembers(GetBoardMembersRequest) returns (GetBoardMembersResponse);

    rpc UpdateBoardName(UpdateBoardNameRequest) returns (UpdateBoardNameResponse);
    rpc AddBoardUsers(AddBoardUsersRequest) returns (AddBoardUsersResponse);
    rpc RemoveBoardUsers(RemoveBoardUsersRequest) returns (RemoveBoardUsersResponse);
    rpc AssignBoardUsersRole(AssignBoardUsersRoleRequest) returns (AssignBoardUsersRoleResponse);
    rpc ChangeBoardOwner(ChangeBoardOwnerRequest) returns (ChangeBoardOwnerResponse);
    rpc ChangeBoardVisibility(ChangeBoardVisibilityRequest) returns (ChangeBoardVisibilityResponse);
    rpc AddLabel(AddLabelRequest) returns (AddLabelResponse);
    rpc RemoveLabel(RemoveLabelRequest) returns (RemoveLabelResponse);
    rpc RestoreBoard(RestoreBoardRequest) returns (RestoreBoardResponse);
    rpc ArchiveBoard(ArchiveBoardRequest) returns (ArchiveBoardResponse);
    rpc DeleteBoard(DeleteBoardRequest) returns (DeleteBoardResponse);

    rpc GetBoardIDByList(GetBoardIDByListRequest) returns (GetBoardIDByListResponse);
    rpc GetBoardIDByCard(GetBoardIDByCardRequest) returns (GetBoardIDByCardResponse);
}