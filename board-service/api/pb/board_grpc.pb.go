// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: board.proto

package board

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardServiceClient interface {
	CreateBoard(ctx context.Context, in *CreateBoardRequest, opts ...grpc.CallOption) (*CreateBoardResponse, error)
	GetBoardByID(ctx context.Context, in *GetBoardByIDRequest, opts ...grpc.CallOption) (*GetBoardByIDResponse, error)
	GetBoardList(ctx context.Context, in *GetBoardListRequest, opts ...grpc.CallOption) (*GetBoardListResponse, error)
	GetArchivedBoardList(ctx context.Context, in *GetArchivedBoardListRequest, opts ...grpc.CallOption) (*GetArchivedBoardListResponse, error)
	GetBoardMembers(ctx context.Context, in *GetBoardMembersRequest, opts ...grpc.CallOption) (*GetBoardMembersResponse, error)
	UpdateBoardName(ctx context.Context, in *UpdateBoardNameRequest, opts ...grpc.CallOption) (*UpdateBoardNameResponse, error)
	AddBoardUsers(ctx context.Context, in *AddBoardUsersRequest, opts ...grpc.CallOption) (*AddBoardUsersResponse, error)
	RemoveBoardUsers(ctx context.Context, in *RemoveBoardUsersRequest, opts ...grpc.CallOption) (*RemoveBoardUsersResponse, error)
	AssignBoardUserRole(ctx context.Context, in *AssignBoardUserRoleRequest, opts ...grpc.CallOption) (*AssignBoardUserRoleResponse, error)
	ChangeBoardOwner(ctx context.Context, in *ChangeBoardOwnerRequest, opts ...grpc.CallOption) (*ChangeBoardOwnerResponse, error)
	ChangeBoardVisibility(ctx context.Context, in *ChangeBoardVisibilityRequest, opts ...grpc.CallOption) (*ChangeBoardVisibilityResponse, error)
	AddLabel(ctx context.Context, in *AddLabelRequest, opts ...grpc.CallOption) (*AddLabelResponse, error)
	RemoveLabel(ctx context.Context, in *RemoveLabelRequest, opts ...grpc.CallOption) (*RemoveLabelResponse, error)
	RestoreBoard(ctx context.Context, in *RestoreBoardRequest, opts ...grpc.CallOption) (*RestoreBoardResponse, error)
	ArchiveBoard(ctx context.Context, in *ArchiveBoardRequest, opts ...grpc.CallOption) (*ArchiveBoardResponse, error)
	DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*DeleteBoardResponse, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) CreateBoard(ctx context.Context, in *CreateBoardRequest, opts ...grpc.CallOption) (*CreateBoardResponse, error) {
	out := new(CreateBoardResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/CreateBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardByID(ctx context.Context, in *GetBoardByIDRequest, opts ...grpc.CallOption) (*GetBoardByIDResponse, error) {
	out := new(GetBoardByIDResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/GetBoardByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardList(ctx context.Context, in *GetBoardListRequest, opts ...grpc.CallOption) (*GetBoardListResponse, error) {
	out := new(GetBoardListResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/GetBoardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetArchivedBoardList(ctx context.Context, in *GetArchivedBoardListRequest, opts ...grpc.CallOption) (*GetArchivedBoardListResponse, error) {
	out := new(GetArchivedBoardListResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/GetArchivedBoardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardMembers(ctx context.Context, in *GetBoardMembersRequest, opts ...grpc.CallOption) (*GetBoardMembersResponse, error) {
	out := new(GetBoardMembersResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/GetBoardMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateBoardName(ctx context.Context, in *UpdateBoardNameRequest, opts ...grpc.CallOption) (*UpdateBoardNameResponse, error) {
	out := new(UpdateBoardNameResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/UpdateBoardName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) AddBoardUsers(ctx context.Context, in *AddBoardUsersRequest, opts ...grpc.CallOption) (*AddBoardUsersResponse, error) {
	out := new(AddBoardUsersResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/AddBoardUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) RemoveBoardUsers(ctx context.Context, in *RemoveBoardUsersRequest, opts ...grpc.CallOption) (*RemoveBoardUsersResponse, error) {
	out := new(RemoveBoardUsersResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/RemoveBoardUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) AssignBoardUserRole(ctx context.Context, in *AssignBoardUserRoleRequest, opts ...grpc.CallOption) (*AssignBoardUserRoleResponse, error) {
	out := new(AssignBoardUserRoleResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/AssignBoardUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ChangeBoardOwner(ctx context.Context, in *ChangeBoardOwnerRequest, opts ...grpc.CallOption) (*ChangeBoardOwnerResponse, error) {
	out := new(ChangeBoardOwnerResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/ChangeBoardOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ChangeBoardVisibility(ctx context.Context, in *ChangeBoardVisibilityRequest, opts ...grpc.CallOption) (*ChangeBoardVisibilityResponse, error) {
	out := new(ChangeBoardVisibilityResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/ChangeBoardVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) AddLabel(ctx context.Context, in *AddLabelRequest, opts ...grpc.CallOption) (*AddLabelResponse, error) {
	out := new(AddLabelResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/AddLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) RemoveLabel(ctx context.Context, in *RemoveLabelRequest, opts ...grpc.CallOption) (*RemoveLabelResponse, error) {
	out := new(RemoveLabelResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/RemoveLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) RestoreBoard(ctx context.Context, in *RestoreBoardRequest, opts ...grpc.CallOption) (*RestoreBoardResponse, error) {
	out := new(RestoreBoardResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/RestoreBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ArchiveBoard(ctx context.Context, in *ArchiveBoardRequest, opts ...grpc.CallOption) (*ArchiveBoardResponse, error) {
	out := new(ArchiveBoardResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/ArchiveBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*DeleteBoardResponse, error) {
	out := new(DeleteBoardResponse)
	err := c.cc.Invoke(ctx, "/boardpb.BoardService/DeleteBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility
type BoardServiceServer interface {
	CreateBoard(context.Context, *CreateBoardRequest) (*CreateBoardResponse, error)
	GetBoardByID(context.Context, *GetBoardByIDRequest) (*GetBoardByIDResponse, error)
	GetBoardList(context.Context, *GetBoardListRequest) (*GetBoardListResponse, error)
	GetArchivedBoardList(context.Context, *GetArchivedBoardListRequest) (*GetArchivedBoardListResponse, error)
	GetBoardMembers(context.Context, *GetBoardMembersRequest) (*GetBoardMembersResponse, error)
	UpdateBoardName(context.Context, *UpdateBoardNameRequest) (*UpdateBoardNameResponse, error)
	AddBoardUsers(context.Context, *AddBoardUsersRequest) (*AddBoardUsersResponse, error)
	RemoveBoardUsers(context.Context, *RemoveBoardUsersRequest) (*RemoveBoardUsersResponse, error)
	AssignBoardUserRole(context.Context, *AssignBoardUserRoleRequest) (*AssignBoardUserRoleResponse, error)
	ChangeBoardOwner(context.Context, *ChangeBoardOwnerRequest) (*ChangeBoardOwnerResponse, error)
	ChangeBoardVisibility(context.Context, *ChangeBoardVisibilityRequest) (*ChangeBoardVisibilityResponse, error)
	AddLabel(context.Context, *AddLabelRequest) (*AddLabelResponse, error)
	RemoveLabel(context.Context, *RemoveLabelRequest) (*RemoveLabelResponse, error)
	RestoreBoard(context.Context, *RestoreBoardRequest) (*RestoreBoardResponse, error)
	ArchiveBoard(context.Context, *ArchiveBoardRequest) (*ArchiveBoardResponse, error)
	DeleteBoard(context.Context, *DeleteBoardRequest) (*DeleteBoardResponse, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServiceServer struct {
}

func (UnimplementedBoardServiceServer) CreateBoard(context.Context, *CreateBoardRequest) (*CreateBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardByID(context.Context, *GetBoardByIDRequest) (*GetBoardByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardByID not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardList(context.Context, *GetBoardListRequest) (*GetBoardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardList not implemented")
}
func (UnimplementedBoardServiceServer) GetArchivedBoardList(context.Context, *GetArchivedBoardListRequest) (*GetArchivedBoardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchivedBoardList not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardMembers(context.Context, *GetBoardMembersRequest) (*GetBoardMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardMembers not implemented")
}
func (UnimplementedBoardServiceServer) UpdateBoardName(context.Context, *UpdateBoardNameRequest) (*UpdateBoardNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoardName not implemented")
}
func (UnimplementedBoardServiceServer) AddBoardUsers(context.Context, *AddBoardUsersRequest) (*AddBoardUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBoardUsers not implemented")
}
func (UnimplementedBoardServiceServer) RemoveBoardUsers(context.Context, *RemoveBoardUsersRequest) (*RemoveBoardUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBoardUsers not implemented")
}
func (UnimplementedBoardServiceServer) AssignBoardUserRole(context.Context, *AssignBoardUserRoleRequest) (*AssignBoardUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignBoardUserRole not implemented")
}
func (UnimplementedBoardServiceServer) ChangeBoardOwner(context.Context, *ChangeBoardOwnerRequest) (*ChangeBoardOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBoardOwner not implemented")
}
func (UnimplementedBoardServiceServer) ChangeBoardVisibility(context.Context, *ChangeBoardVisibilityRequest) (*ChangeBoardVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBoardVisibility not implemented")
}
func (UnimplementedBoardServiceServer) AddLabel(context.Context, *AddLabelRequest) (*AddLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabel not implemented")
}
func (UnimplementedBoardServiceServer) RemoveLabel(context.Context, *RemoveLabelRequest) (*RemoveLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabel not implemented")
}
func (UnimplementedBoardServiceServer) RestoreBoard(context.Context, *RestoreBoardRequest) (*RestoreBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBoard not implemented")
}
func (UnimplementedBoardServiceServer) ArchiveBoard(context.Context, *ArchiveBoardRequest) (*ArchiveBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveBoard not implemented")
}
func (UnimplementedBoardServiceServer) DeleteBoard(context.Context, *DeleteBoardRequest) (*DeleteBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/CreateBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreateBoard(ctx, req.(*CreateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/GetBoardByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardByID(ctx, req.(*GetBoardByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/GetBoardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardList(ctx, req.(*GetBoardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetArchivedBoardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchivedBoardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetArchivedBoardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/GetArchivedBoardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetArchivedBoardList(ctx, req.(*GetArchivedBoardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/GetBoardMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardMembers(ctx, req.(*GetBoardMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateBoardName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoardNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateBoardName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/UpdateBoardName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateBoardName(ctx, req.(*UpdateBoardNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_AddBoardUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBoardUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).AddBoardUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/AddBoardUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).AddBoardUsers(ctx, req.(*AddBoardUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_RemoveBoardUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBoardUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).RemoveBoardUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/RemoveBoardUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).RemoveBoardUsers(ctx, req.(*RemoveBoardUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_AssignBoardUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignBoardUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).AssignBoardUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/AssignBoardUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).AssignBoardUserRole(ctx, req.(*AssignBoardUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ChangeBoardOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBoardOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ChangeBoardOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/ChangeBoardOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ChangeBoardOwner(ctx, req.(*ChangeBoardOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ChangeBoardVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBoardVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ChangeBoardVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/ChangeBoardVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ChangeBoardVisibility(ctx, req.(*ChangeBoardVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_AddLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).AddLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/AddLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).AddLabel(ctx, req.(*AddLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_RemoveLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).RemoveLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/RemoveLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).RemoveLabel(ctx, req.(*RemoveLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_RestoreBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).RestoreBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/RestoreBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).RestoreBoard(ctx, req.(*RestoreBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ArchiveBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ArchiveBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/ArchiveBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ArchiveBoard(ctx, req.(*ArchiveBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardpb.BoardService/DeleteBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteBoard(ctx, req.(*DeleteBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boardpb.BoardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBoard",
			Handler:    _BoardService_CreateBoard_Handler,
		},
		{
			MethodName: "GetBoardByID",
			Handler:    _BoardService_GetBoardByID_Handler,
		},
		{
			MethodName: "GetBoardList",
			Handler:    _BoardService_GetBoardList_Handler,
		},
		{
			MethodName: "GetArchivedBoardList",
			Handler:    _BoardService_GetArchivedBoardList_Handler,
		},
		{
			MethodName: "GetBoardMembers",
			Handler:    _BoardService_GetBoardMembers_Handler,
		},
		{
			MethodName: "UpdateBoardName",
			Handler:    _BoardService_UpdateBoardName_Handler,
		},
		{
			MethodName: "AddBoardUsers",
			Handler:    _BoardService_AddBoardUsers_Handler,
		},
		{
			MethodName: "RemoveBoardUsers",
			Handler:    _BoardService_RemoveBoardUsers_Handler,
		},
		{
			MethodName: "AssignBoardUserRole",
			Handler:    _BoardService_AssignBoardUserRole_Handler,
		},
		{
			MethodName: "ChangeBoardOwner",
			Handler:    _BoardService_ChangeBoardOwner_Handler,
		},
		{
			MethodName: "ChangeBoardVisibility",
			Handler:    _BoardService_ChangeBoardVisibility_Handler,
		},
		{
			MethodName: "AddLabel",
			Handler:    _BoardService_AddLabel_Handler,
		},
		{
			MethodName: "RemoveLabel",
			Handler:    _BoardService_RemoveLabel_Handler,
		},
		{
			MethodName: "RestoreBoard",
			Handler:    _BoardService_RestoreBoard_Handler,
		},
		{
			MethodName: "ArchiveBoard",
			Handler:    _BoardService_ArchiveBoard_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _BoardService_DeleteBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "board.proto",
}
